/*
만들 게임 : 쯔꾸르 형식의 2D 플랫폼 게임
    기능
        플레이어 이동
        NPC 대화
        오브젝트 상호작용
        퀘스트
        저장, 불러오기
*/

/*
목표 : 게임에 사용될 맵을 만들고 싶다.
    1. 맵을 만들기 위해 스프라이트를 그린다.
    2. 스프라이트는 Rule Tile을 이용하여 그리도록 한다.
    3. Grid에 TileMap을 분류하여 플레이어가 걸어다닐 맵과 충돌할 맵을 따로 그린다.
    4. Player가 맵 밖으로 나가지 못하도록 경계선을 그려준다.
        Mask Interaction + Rigidbody2D + Tilemap Collider2D + Composite Collider2D
*/

/*
목표 : 플레이어가 키보드 입력에 따라 움직이게 하고 싶다.
    1. 필요 속성 : Rigidbody2D, 속도, 수평값, 수직값
    2. 매 프레임마다 입력을 감지하여 변수에 수직, 수평 값을 저장한다.
    3. 저장한 변수를 이용하여 velocity에 배정한다.
    4. 속도를 곱해준다.
    5. 쯔꾸르 게임은 평면에 붙어서 이동한다. Player의 중력값을 0으로 설정한다.
*/

/*
목표 : 플레이어가 대각선 방향으로 움직이지 못하게 하고 싶다.
    1. 필요 속성 : 수평 이동인지 체크할 불값(isHorizonMove), 수직/수평 버튼 입력을 체크할 불값(hDown,vDown,hUp,vUp)
    2. (isHorizonMove) 값에 따라서 수평 이동만 하거나 수직 이동만 하게 한다.
    3. 버튼이 눌렸을 때와 버튼이 때어졌을 때 (isHorizonMove)에 값을 준다.
        수평/수직 으로 버튼이 눌렸는지, 때어젔는지 확인하는 bool 변수를 만들고
        그 bool 변수를 통해서 플레이어가 수평으로 이동하는지 아닌지를 정한다.
        버튼이 때어졌을 때는 수평값이 0인지 아닌지로 (isHorizonMove)값을 준다.
*/

/*
목표 : 플레이어가 이동할 때 애니메이션을 출력하고 싶다.
    1. 필요 속성 : Animator
    2. 먼저 스프라이트를 방향 별 이동 + 방향 별 멈춤으로 애니메이션 클립을 만든다.
    3. 플레이어는 어떤 상태에서든 움직일 수 있고 움직임의 입력이 없어지면 그 방향으로 멈춘다.
    4. 수평과 수직으로 사용자 입력을 받으므로 int형 수직, 수평 파라미터를 만든다.
        0보다 크거나 작거나 혹은 같은지로 애니메이션 클립을 이동한다.
        파라미터는 전달될 때마다 애니메이터가 갱신한다. 
            한쪽 방향으로 움직일 때 같은 값을 계속해서 파라미터로 전달하지 않도록 제어문을 만들어 준다.
            또 불 파라미터를 추가로 만들어서 이동 중인지를 체크한다.
    5. 플레이어가 움직이는 입력키를 받을 때 파라미터를 전달한다.
*/

/*
목표 : 플레이어의 앞에있는 오브젝트와 상호작용하기 위해 오브젝트 정보를 받아오고 싶다.
    1. 필요 속성 : Vector3, RaycastHit2D, LayerMask
    2. 게임 씬에서 시각적으로 Ray를 표시해 준다.
        여기서 Ray의 발사 방향이 필요하다.
        방향 벡터를 만들어 주고 버튼 입력과 속도를 측정해서 벡터 값을 지정해 준다.
        버튼을 동시에 눌렀다가 하나만 때었을 때 Ray가 이전 방향으로 발사된다.
            이를 방지하기 위해 버튼의 입력을 제어문에서 제거하고 애니메이션의 파라미터( bool )을 받아와서 애니메이션이 바뀔 때 방향에 대한 속도를 체크해 준다.
*/